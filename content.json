{"pages":[],"posts":[{"title":"不靠框架，JS 如何實現 SPA ? | 背後的一些概念","text":"前言今天想到平常都靠框架去實現單頁式應用，那純靠 JS呢? 上網估狗一下看到一篇好文，在此筆記一下學到的 原文網址: https://blog.huli.tw/2019/09/18/spa-common-problem-about-router/ 動態網站與靜態網站的區別?有無給 Server處理過代碼。 JS SPA router的實現1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;style&gt; .page { display: none; } .home-page { display: block; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;nav&gt; &lt;span onclick=&quot;changePage('home')&quot;&gt;home&lt;/span&gt; | &lt;span onclick=&quot;changePage('list')&quot;&gt;list&lt;/span&gt; | &lt;span onclick=&quot;changePage('about')&quot;&gt;about&lt;/span&gt; &lt;/nav&gt; &lt;div class=&quot;page home-page&quot;&gt;I am homepage&lt;/div&gt; &lt;div class=&quot;page list-page&quot;&gt;I am list&lt;/div&gt; &lt;div class=&quot;page about-page&quot;&gt;About me &lt;/div&gt; &lt;/body&gt; &lt;script src=&quot;https://code.jquery.com/jquery-1.12.4.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt; function changePage(page) { $('.page').hide() if (page === 'home') { $('.home-page').show() } else if (page === 'list') { $('.list-page').show() } else if (page === 'about') { $('.about-page').show() } // 初始化 changePage(location.hash) // 每當 hash 變動的時候 window.addEventListener(&quot;hashchange&quot;, function() { changePage(location.hash) }); } &lt;/script&gt;&lt;/html&gt; 他的例子是用 JQuery的 hide, show方法去實現。 這邊有個重點是 換頁的時候，網址會改變，所以網址後面要加上# 例如原本是 index.html ，切換到關於我 就變 index.html#about 利用網址後面加上 # 不會跳頁的方式來辨別現在在哪裡 這也是 vue裡面的 hash router 那這樣子網址會變很醜，所以利用 html5的 History API，就可以用 JavaScript 來操作網址列，但又不會真的換頁了。 https://developer.mozilla.org/zh-TW/docs/Web/API/History_API MDN內文有一句話「但不會讓瀏覽器去載入 bar.html」 就算網址列有變，只要瀏覽器沒有去載入其他頁面，其實就不叫「換頁」。所以 SPA 從來都不是指說「網址列不能變」，而是不能去載入其他頁面，這點一定要搞清楚。 完整code: 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;style&gt; .page { display: none; } .home-page { display: block; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;nav&gt; &lt;span onclick=&quot;changePage('home')&quot;&gt;home&lt;/span&gt; | &lt;span onclick=&quot;changePage('list')&quot;&gt;list&lt;/span&gt; | &lt;span onclick=&quot;changePage('about')&quot;&gt;about&lt;/span&gt; &lt;/nav&gt; &lt;div class=&quot;page home-page&quot;&gt;I am homepage&lt;/div&gt; &lt;div class=&quot;page list-page&quot;&gt;I am list&lt;/div&gt; &lt;div class=&quot;page about-page&quot;&gt;About me &lt;/div&gt; &lt;/body&gt; &lt;script src=&quot;https://code.jquery.com/jquery-1.12.4.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt; function changePage(page) { $('.page').hide() if (page === 'home') { $('.home-page').show() } else if (page === 'list') { $('.list-page').show() } else if (page === 'about') { $('.about-page').show() } // 精華所在 history.pushState(null, null, page) } &lt;/script&gt;&lt;/html&gt;","link":"/2022/02/13/SPA/"},{"title":"用 JSON Server 模擬 RESTful API","text":"當練習或開發時需要透過 API取得資料，而手邊正沒有符合的 API可以用時，就可以 JSON Sever 這個 JS 套件，幫我們建立一個 API Server，只需要建立一個JSON形式的資料。 JSON Server 安裝步驟https://github.com/typicode/json-server Install JSON Server 1npm install -g json-server 創建 db.json 並輸入資料 123456789{ &quot;posts&quot;: [ { &quot;id&quot;: 1, &quot;title&quot;: &quot;json-server&quot;, &quot;author&quot;: &quot;typicode&quot; } ], &quot;comments&quot;: [ { &quot;id&quot;: 1, &quot;body&quot;: &quot;some comment&quot;, &quot;postId&quot;: 1 } ], &quot;profile&quot;: { &quot;name&quot;: &quot;typicode&quot; }} Start JSON Server 1json-server --watch db.json 訪問 http://localhost:3000/posts/1就可以得到資料 1{ &quot;id&quot;: 1, &quot;title&quot;: &quot;json-server&quot;, &quot;author&quot;: &quot;typicode&quot; } 搭配 axios 實作 專案資料夾 npm init (使用 npm前要先安裝 node)，創建 package.json ，package.json是掌管專案資訊的重要檔案。 npm install axios 創建一個 main.js，輸入以下代碼 1234567891011import axios from &quot;axios&quot;;function api() { axios.get('http://localhost:3000/posts').then( (res) =&gt; { process.stdout.write(JSON.stringify(res.data)); } )}api(); 終端輸入 node main.js ，run 我們的JS檔案，就可以看到抓取到的資料了。 自訂自己的 npm command 在 package.json中，在 scripts去定義自己的npm command，這裡命名為 json，去操作 json-server 開啟指令，並設定 port 為8888。 123&quot;scripts&quot;: { &quot;json&quot;: &quot;json-server --watch db.json --port 8888&quot; }, 設定好後，在 終端機上輸入 npm run json 就可以執行 json-server –watch db.json –port 8888 這項指令。 相關文連結: https://medium.com/html-test/從零開始-使用npm套件-317beefdf182 https://medium.com/@debbyji/用-json-server-模擬-restful-api-f07abda3927c [https://ithelp.it","link":"/2022/02/08/%E7%94%A8-JSON-Server-%E6%A8%A1%E6%93%AC-RESTful-API/"}],"tags":[],"categories":[]}